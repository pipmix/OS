
Shared Variables:
freelist
list1
list2
block(where block is some data type to hold items)

semaphore freelist, list1, list2, block



//remove a block from list1 and return that block    
// multiple readers 1 writer
Process 1 {  
	// removes block from freelist t and stores in b
	// produces data into b
	// inserts b into list1


	var b = *block;
	while (1) {

		p(freelist);
		p(block);
		b = unlink(freelist); 			// b = * to block removed from freelist
		v(freelist);
		produce_information_in_a_block(b);
		p(list1);
		link(b, list1); 				// insert block b into list1
		v(block);
		v(list1);
	}
}

Process 2 {

	// removes block from list1 and freelist
	// use block x to put into y
	// inssert block into freelist and list2
	p(block);
	var x = *block;
	var y = *block;
	v(block);
	
	while (1) {
		p(block);
		p(list1);
		x = unlink(list1); 						// x = block removed from list1
		v(list1);
		pfreelist);
		y = unlink(freelist); 					// y = block removed from freelist
		use_block_x_to_produce_info_in_y(x, y);
		link(x, freelist); 						// insert block x into freelist
		v(freelist);
		link(y, list2); 						// insert block y into list2 
		v(list2);
		v(block);

	}
}

Process 3{

	// remove block from list2
	// insert block into freelist

	p(block);
	var c = *block;
	v(block);
	while (1) {
		p(block);
		p(list2);
		c = unlink(list2); 				// y = block removed from list2
		v(list2);
		consume_info_in_block(c);
		link(c, freelist); 				// insert block C into freelist
		v(freelist);
		v(block);
	}
}
