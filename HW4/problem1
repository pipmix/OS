#include <iostream>
#include <mutex>
#include <thread>
#include <vector>
using namespace std;

mutex myMutex;
vector<int> myBucket;

// This Function fills in the bucket with 15 items of data
void ProduceFunction(){

	myMutex.lock();
	if (myBucket.size() != 0){
		myMutex.unlock();
		return;
	}
	int pData = 0;
	for (int i = 0; i < 15; i++)
		myBucket.push_back(pData++);
	cout << "Producer thread locks mutex and produced 15 items of data\n" ;
	myMutex.unlock();
}

// This function uses a mutex to prevent the concurrent threads from accessing the CS at the same time
// The threads will hold at the mutex until the CS becomes available 
// The mutex will unlock after the data has been accessed allowing other threads to access
void ConsumeFunction(int threadNumber) {

	myMutex.lock();
	//cout << "Consumer Thread Unlocked mutex"  << endl;
	if (myBucket.size() == 0){
		myMutex.unlock();
		return;
	}
	cout << "Thread " << threadNumber << " locks mutex and retreives data " << myBucket[myBucket.size() - 1] << endl;
	myBucket.pop_back();
	myMutex.unlock();
}

int main(){

	thread threadPool[6];

	do { // will execute until bucket is emptied, used a do while for inital fill of bucket
		// producer thread
		threadPool[0] = thread(ProduceFunction);
		// consumer threads
		for (int i = 1; i < 6; i++)
			threadPool[i] = thread(ConsumeFunction, i + 1);
		
		for (auto& t : threadPool) t.join();

	} while (myBucket.size() != 0);

	return 0;
}
